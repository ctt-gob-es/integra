# Copyright (C) 2017 MINHAP, Gobierno de España
# This program is licensed and may be used, modified and redistributed under the terms
# of the European Public License (EUPL), either version 1.1 or (at your
# option) any later version as soon as they are approved by the European Commission.
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and
# more details.
# You should have received a copy of the EUPL1.1 license
# along with this program; if not, you may find it at
# http://joinup.ec.europa.eu/software/page/eupl/licence-eupl

#PROPIEDADES ESPECÍFICAS DE CADA APLICACIÓN PARA INVOCAR LOS SERVICIOS WEB DE TS@

#secureMode -> Posibles valores: true / false. 
secureMode=false
#Host y puerto donde se publican los servicios WS de TS@.
endPoint=
#Contexto en el que se publican el listado de los servicios WS de TS@. 
servicePath=

#Tiempo de vida para las peticiones SOAP, en milisegundos.
callTimeout =10000

#Modo de validación para los sellos de tiempo que vayan a ser renovados. Los valores permitidos son:
#	0 -> Sin validación. Este modo va a en contra del estándar definido por OASIS que establece que en una operación de renovación 
#						 de sello de tiempo el cliente debe validar el sello de tiempo previamente.
# 	1 -> Validación de la integridad
#	2 -> Validación completa (Se realizará invocación al servicio de validación de sello de tiempo WS de TS@)
renewTimeStampWS.validationLevel = 0

#Tipo de autenticación para la petición SOAP:
#UserNameToken: Autorización por usuario/Contraseña.
#X509CertificateToken: Autorización por certificado.
#SAMLToken: Autorización por SAML
authorizationMethod =X509CertificateToken

# ---------- INICIO autenticación UserNameToken ----------
#Nombre de usuario para el caso de autenticación por usuario/Contraseña para la petición SOAP.
UserNameToken.userName =

#Contraseña de usuario para el caso de autenticación por usuario/Contraseña para la petición SOAP.
UserNameToken.userPassword =
# ---------- FIN autenticación UserNameToken ----------

# ---------- INICIO autenticación X509CertificateToken ----------
#Mecanismo de inclusión del certificado para el caso de autorización por certificado para la petición SOAP:
#Direct: Binary Security Token
#Identifier: Key Identifier
#IssuerSerialNumber: Issuer and Serial Number
X509CertificateToken.inclusionMethod =Direct

#Ruta al almacén de claves donde se encuentra almacenada la clave privada a usar para firmar la petición SOAP en el caso de autenticación por certificado.
X509CertificateToken.keystorePath =

#Tipo de almacén de claves donde se encuentra almacenada la clave privada a usar para firmar la petición SOAP en el caso de autenticación por certificado:
#PKCS12
#JKS
#JCEKS
X509CertificateToken.keystoreType =

#Contraseña del almacén de claves donde se encuentra almacenada la clave privada a usar para firmar la petición SOAP en el caso de autenticación por certificado.
X509CertificateToken.keystorePassword =

#Alias de la clave privada a usar para firmar la petición SOAP en el caso de autenticación por certificado.
X509CertificateToken.privateKeyAlias =

#Contraseña de la clave privada a usar firmar la petición SOAP en el caso de autenticación por certificado.
X509CertificateToken.privateKeyPassword =
# ---------- FIN autenticación X509CertificateToken ----------

# ---------- INICIO autenticación SAMLToken ----------
#Método de confirmación del sujeto para el caso de autorización por SAML:
#HOK: Holder-of-Key
#SV: Sender-Vouches
SAMLToken.method = SV

#Ruta al almacén de claves donde se encuentra almacenada la clave privada a usar para firmar la petición SOAP en el caso de autenticación por SAML.
SAMLToken.keystorePath =

#Tipo de almacén de claves donde se encuentra almacenada la clave privada a usar para firmar la petición SOAP en el caso de autenticación por SAML:
#PKCS12
#JKS
#JCEKS
SAMLToken.keystoreType =

#Contraseña del almacén de claves donde se encuentra almacenada la clave privada a usar para firmar la petición SOAP en el caso de autenticación por SAML.
SAMLToken.keystorePassword =

#Alias de la clave privada a usar para firmar la petición SOAP en el caso de autenticación por SAML.
SAMLToken.privateKeyAlias =

#Contraseña de la clave privada a usar para firmar la petición SOAP en el caso de autenticación por SAML.
SAMLToken.privateKeyPassword =
# ---------- FIN autenticación SAMLToken ----------

# ---------- INICIO CIFRADO PETICIÓN CON CLAVE SIMÉTRICA ----------
#Indicador para cifrar las peticiones SOAP con clave simétrica o no:
#true: Las peticiones SOAP irán cifradas.
#false: Las peticiones SOAP no irán cifradas.
request.symmetricKey.use =false

#Alias de la clave simétrica a usar para cifrar las peticiones SOAP.
request.symmetricKey.alias =

#Valor de la clave simétrica, en hexadecimal, a usar para cifrar las peticiones SOAP.
request.symmetricKey.value =

#Algoritmo usado para el cifrado.
#Ejemplo: http://www.w3.org/2001/04/xmlenc#tripledes-cbc
#Para ver la lista de posibles valores, ver: https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#sec-Algorithms
request.symmetricKey.algorithm = 

# ---------- FIN CIFRADO PETICIÓN CON CLAVE SIMÉTRICA ----------

# ---------- INICIO autenticación RESPUESTA FIRMADA ----------
#Bandera que indica si se debe validar las respuestas SOAP.
response.validate = 

#Ruta al almacén de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
response.keystorePath =

#Tipo de almacén de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
#PKCS12
#JKS
#JCEKS
response.keystoreType =

#Contraseña del almacén de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
response.keystorePassword =

#Alias del certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
response.certificateAlias =

# ---------- FIN autenticación RESPUESTA FIRMADA ----------

# ---------- INICIO autenticación RESPUESTA SAML ----------
#Ruta al almacén de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP aseguradas con SAML.
response.SAML.keystorePath =

#Tipo de almacén de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP aseguradas con SAML.
#PKCS12
#JKS
#JCEKS
response.SAML.keystoreType =

#Contraseña del almacén de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP aseguradas con SAML.
response.SAML.keystorePassword =

#Alias del certificado a usar para validar las respuestas SOAP aseguradas con SAML.
response.SAML.certificateAlias =

# ---------- FIN autenticación RESPUESTA SAML ----------

# ---------- INICIO DESCIFRADO RESPUESTA CON CLAVE SIMÉTRICA ----------
#Alias de la clave simétrica a usar para descifrar las respuestas SOAP cifradas con clave simétrica.
response.symmetricKey.alias =

#Valor de la clave simétrica a usar para descifrar las respuestas SOAP cifradas con clave simétrica.
#NOTA: La clave debe estar codificada en decimal, hexadecimal u octal. Usar ',' como delimitador entre caracteres.
response.symmetricKey.value =



#PROPIEDADES ESPECÍFICAS DE CADA APLICACIÓN PARA INVOCAR LOS SERVICIOS RFC 3161 DE TS@

#Dirección host donde se encuentra desplegado el servicio RFC 3161.
rfc3161.host =

#OID de la política de sello de tiempo a indicar en la petición.
rfc3161.timestampPolicyOID =

#OID de la APLICACIÓN a indicar en la petición
rfc3161.applicationOID = 1.3.4.6.1.3.4.6

#Tiempo de vida para las peticiones al servicio RFC 3161, en milisegundos.
rfc3161.Timeout =

#Algoritmo de resumen que aplicar sobre los datos a sellar:
#SHA
#SHA-256
#SHA-512
#RIPEMD-160
rfc3161.shaAlgorithm =


# ---------- INICIO SERVICIO RFC 3161 (TCP) ----------

#Número del puerto donde se encuentra desplegado el servicio RFC 3161.
rfc3161.portNumber =

# ---------- INICIO SERVICIO RFC 3161 (TCP) ----------


# ---------- INICIO SERVICIO RFC 3161 (HTTPS) ----------

#Número del puerto donde se encuentra desplegado el servicio RFC 3161 - HTTPS.
rfc3161HTTPS.portNumber =

#Contexto para la conexión con el servicio RFC 3161 por HTTPS.
rfc3161HTTPS.context =

#Indicador para utilizar autenticación HTTPS mediante certificado cliente o no:
#true: El cliente se autentica mediante certificado.
#false: El cliente no requiere de autenticación mediante certificado.
rfc3161HTTPS.useAuthClient =

#Ruta al almacén de claves donde se encuentra almacenada la clave privada a usar para la autenticación HTTPS del cliente por certificado.
rfc3161HTTPS.keystorePath =

#Tipo de almacén de claves donde se encuentra almacenada la clave privada a usar para la autenticación HTTPS del cliente por certificado:
#PKCS12
#JKS
#JCEKS
rfc3161HTTPS.keystoreType =

#Contraseña del almacén de claves donde se encuentra almacenada la clave privada a usar para la autenticación HTTPS del cliente por certificado.
rfc3161HTTPS.keystorePassword =

# ---------- INICIO SERVICIO RFC 3161 (HTTPS) ----------


# ---------- INICIO SERVICIO RFC 3161 (SSL) ----------

#Número del puerto donde se encuentre desplegado el servicio RFC 3161 que permite autenticación por SSL.
rfc3161SSL.portNumber =

#Ruta al almacén de claves donde se encuentra almacenada la clave privada a usar para la autenticación por SSL.
rfc3161SSL.keystorePath =

#Tipo de almacén de claves donde se encuentra almacenada la clave privada a usar para la autenticación por SSL:
#PKCS12
#JKS
#JCEKS
rfc3161SSL.keystoreType =

#Contraseña del almacén de claves donde se encuentra almacenada la clave privada a usar para la autenticación por SSL.
rfc3161SSL.keystorePassword =

# ---------- INICIO SERVICIO RFC 3161 (SSL) ----------