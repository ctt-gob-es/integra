// Copyright (C) 2012-13 MINHAP, Gobierno de España
// This program is licensed and may be used, modified and redistributed under the terms
// of the European Public License (EUPL), either version 1.1 or (at your
// option) any later version as soon as they are approved by the European Commission.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and
// more details.
// You should have received a copy of the EUPL1.1 license
// along with this program; if not, you may find it at
// https://eupl.eu/1.1/es/

/**
 * <b>File:</b><p>es.gob.afirma.integraFacade.pojo.CoSignRequest.java.</p>
 * <b>Description:</b><p>Class that represents the request for the service to generate a co-signature.</p>
 * <b>Project:</b><p>Library for the integration with the services of @Firma, eVisor and TS@.</p>
 * <b>Date:</b><p>24/11/2014.</p>
 * @author Gobierno de España.
 * @version 1.0, 24/11/2014.
 */
package es.gob.afirma.integraFacade.pojo;

import java.io.Serializable;

/**
 * <p>Class that represents the request for the service to generate a co-signature.</p>
 * <b>Project:</b><p>Library for the integration with the services of @Firma, eVisor and TS@.</p>
 * @version 1.0, 24/11/2014.
 */
public class CoSignRequest implements Serializable {

    /**
     * Class serial version.
     */
    private static final long serialVersionUID = 2582217313616733868L;

    /**
     * Attribute that represents signature identifier generated by @Firma.
     */
    private String transactionId;

    /**
     * Attribute that represents the location of a document in a document manager or repository.
     */
    private Repository documentRepository;

    /**
     * Attribute that represents the location of a signature in a document manager or repository.
     */
    private Repository signatureRepository;

    /**
     * Attribute that represents application identifier.
     */
    private String applicationId;

    /**
     * Attribute that contains the ID of the key to be used for generating a signature delegate.
     */
    private String keySelector;

    /**
     * Attribute that indicates the hash algorithm to be used in the calculation of the signature.
     */
    private HashAlgorithmEnum hashAlgorithm;

    /**
     * Attribute that represents the identifier of the signature policy.
     */
    private String signaturePolicyIdentifier;

    /**
     * Attribute that indicates to server that is not going to save a possible grace period.
     */
    private boolean ignoreGracePeriod;

    /**
     * Attribute that contains the signature to cosign.
     */
    private byte[ ] signature;

    /**
     * Attribute that represents document to be Co signed.
     */
    private byte[ ] document;

    /**
     * Constructor method for the class CoSignRequest.java.
     */
    public CoSignRequest() {
    }

    /**
     * Gets the value of the attribute {@link #transactionId}.
     * @return the value of the attribute {@link #transactionId}.
     */
    public final String getTransactionId() {
	return transactionId;
    }

    /**
     * Sets the value of the attribute {@link #transactionId}.
     * @param transactionIdParam The value for the attribute {@link #transactionId}.
     */
    public final void setTransactionId(String transactionIdParam) {
	this.transactionId = transactionIdParam;
    }

    /**
     * Gets the value of the attribute {@link #documentRepository}.
     * @return the value of the attribute {@link #documentRepository}.
     */
    public final Repository getDocumentRepository() {
	return documentRepository;
    }

    /**
     * Sets the value of the attribute {@link #documentRepository}.
     * @param documentRepositoryParam The value for the attribute {@link #documentRepository}.
     */
    public final void setDocumentRepository(Repository documentRepositoryParam) {
	this.documentRepository = documentRepositoryParam;
    }

    /**
     * Gets the value of the attribute {@link #signatureRepository}.
     * @return the value of the attribute {@link #signatureRepository}.
     */
    public final Repository getSignatureRepository() {
	return signatureRepository;
    }

    /**
     * Sets the value of the attribute {@link #signatureRepository}.
     * @param signatureRepositoryParam The value for the attribute {@link #signatureRepository}.
     */
    public final void setSignatureRepository(Repository signatureRepositoryParam) {
	this.signatureRepository = signatureRepositoryParam;
    }

    /**
     * Gets the value of the attribute {@link #applicationId}.
     * @return the value of the attribute {@link #applicationId}.
     */
    public final String getApplicationId() {
	return applicationId;
    }

    /**
     * Sets the value of the attribute {@link #applicationId}.
     * @param applicationIdParam The value for the attribute {@link #applicationId}.
     */
    public final void setApplicationId(String applicationIdParam) {
	this.applicationId = applicationIdParam;
    }

    /**
     * Gets the value of the attribute {@link #keySelector}.
     * @return the value of the attribute {@link #keySelector}.
     */
    public final String getKeySelector() {
	return keySelector;
    }

    /**
     * Sets the value of the attribute {@link #keySelector}.
     * @param keySelectorParam The value for the attribute {@link #keySelector}.
     */
    public final void setKeySelector(String keySelectorParam) {
	this.keySelector = keySelectorParam;
    }

    /**
     * Gets the value of the attribute {@link #hashAlgorithm}.
     * @return the value of the attribute {@link #hashAlgorithm}.
     */
    public final HashAlgorithmEnum getHashAlgorithm() {
	return hashAlgorithm;
    }

    /**
     * Sets the value of the attribute {@link #hashAlgorithm}.
     * @param hashAlgorithmParam The value for the attribute {@link #hashAlgorithm}.
     */
    public final void setHashAlgorithm(HashAlgorithmEnum hashAlgorithmParam) {
	this.hashAlgorithm = hashAlgorithmParam;
    }

    /**
     * Gets the value of the attribute {@link #signaturePolicyIdentifier}.
     * @return the value of the attribute {@link #signaturePolicyIdentifier}.
     */
    public final String getSignaturePolicyIdentifier() {
	return signaturePolicyIdentifier;
    }

    /**
     * Sets the value of the attribute {@link #signaturePolicyIdentifier}.
     * @param signaturePolicyIdentifierParam The value for the attribute {@link #signaturePolicyIdentifier}.
     */
    public final void setSignaturePolicyIdentifier(String signaturePolicyIdentifierParam) {
	this.signaturePolicyIdentifier = signaturePolicyIdentifierParam;
    }

    /**
     * Gets the value of the attribute {@link #ignoreGracePeriod}.
     * @return the value of the attribute {@link #ignoreGracePeriod}.
     */
    public final boolean isIgnoreGracePeriod() {
	return ignoreGracePeriod;
    }

    /**
     * Sets the value of the attribute {@link #ignoreGracePeriod}.
     * @param ignoreGracePeriodParam The value for the attribute {@link #ignoreGracePeriod}.
     */
    public final void setIgnoreGracePeriod(boolean ignoreGracePeriodParam) {
	this.ignoreGracePeriod = ignoreGracePeriodParam;
    }

    /**
     * Gets the value of the attribute {@link #signature}.
     * @return the value of the attribute {@link #signature}.
     */
    public final byte[ ] getSignature() {
	return signature;
    }

    /**
     * Sets the value of the attribute {@link #signature}.
     * @param signatureParam The value for the attribute {@link #signature}.
     */
    public final void setSignature(byte[ ] signatureParam) {
	if (signatureParam != null) {
	    this.signature = signatureParam.clone();
	}
    }

    /**
     * Gets the value of the attribute {@link #document}.
     * @return the value of the attribute {@link #document}.
     */
    public final byte[ ] getDocument() {
	return document;
    }

    /**
     * Sets the value of the attribute {@link #document}.
     * @param documentParam The value for the attribute {@link #document}.
     */
    public final void setDocument(byte[ ] documentParam) {
	if (documentParam != null) {
	    this.document = documentParam.clone();
	}
    }

}
