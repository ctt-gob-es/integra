# en.gob.afirma.tsl.access.TSLManager
TM_LOG001 = An error occurred while trying to parse and check the TSL.
TM_LOG002 = There is no TSL on the specified path.
TM_LOG003 = We proceed to try to validate the certificate with the TSLv {0} {1} - {2}.
TM_LOG004 = The certificate to be analyzed contains the extension id_kp_timestamping among its attributions, so it is considered a certificate for time stamp signatures.
TM_LOG005 = The certificate to be analyzed does NOT correspond to the time stamp signature, since it does NOT contain the extension id_kp_timestamping among its attributions.
TM_LOG006 = An error occurred while validating the certificate through TSL trying to check if the certificate has the OID for id-kp-timestamping as keyPurpose.
TM_LOG007 = An error occurred during certificate validation using TSL of realm [{0}] and sequence number [{1}].
TM_LOG008 = An error occurred while downloading the TSL from uri {0}.
TM_LOG009 = No se pudieron obtener los mapeos propios de la regi \ u00F3n de la TSL asociada al certificado. Se continuar \ u00E1 el proceso sin dicha informaci \ u00F3n.

# en.gob.afirma.tsl.parsing.impl.common.ATSLBuilder
ATB_LOG001 = Error parsing TSL, input data stream (XML) is null.
ATB_LOG002 = Error reading input stream with TSL data.
ATB_LOG003 = The attribute [{0}] was not found when it is required.
ATB_LOG004 = Error parsing attribute [{0}] in TSL.
ATB_LOG005 = Error parsing element [{0}] in TSL.
ATB_LOG006 = Error parsing element [{0}]. It does not have a correct value.
ATB_LOG007 = Error parsing attribute [{0}]. It does not have a correct value.
ATB_LOG008 = An incorrect format of URI [{0}] has been detected in the TSPInformationAddress field. Blanks have been removed and the process continues.
ATB_LOG009 = Error when parsing the TSL under the ETSI TS 119612 2.1.1 standard.

# en.gob.afirma.tsl.parsing.impl.tsl119612.v020101.TSLBuilder
TB_LOG001 = Error: Element [{0}] cannot be null.
TB_LOG002 = For element [{0}] the value [{1}] will be changed to [{2}], which is recognized by the specification [{3}].
TB_LOG003 = Error: Extension [{0}] cannot have the value [{1}].
TB_LOG004 = A TSP Service with type [{0}] has been detected, which is incorrectly defined in the specification (errata). Its value is automatically replaced by [{1}], which is correct.
TB_LOG005 = Error: Item [{0}] has an incorrect value.

# en.gob.afirma.tsl.parsing.impl.common.TSLObject
TO_LOG001 = Error: Cannot assign null value to attribute [{0}] in TSL.
TO_LOG002 = Error: Unable to assign a null value to element [{0}] in the TSL.
TO_LOG003 = Error: It is not possible to add a new element {0} with null value in the TSL.

# en.gob.afirma.tsl.parsing.impl.tsl119612.v020101.TSLChecker
TC_LOG001 = Error: Attribute [{0}] has an incorrect value.
TC_LOG002 = Error: Element [{0}] cannot be null.
TC_LOG003 = Error: Item [{0}] has an incorrect value.
TC_LOG004 = Error: The region code [{0}] of the TSL signing certificate does not match the realm specified in this [{1}].
TC_LOG005 = Error: For the ETSI TS 119612 2.1.1 specification it is necessary that the element [{0}] be at least in English.
TC_LOG006 = Error: For the ETSI TS 119612 2.1.1 specification, element [{0}] does not have a well defined value.
TC_LOG007 = Not found any of the URIs [{0}] within the TSL Pointers of the TSL, and as it is a TSL of a European member, it must be defined.
TC_LOG008 = The TSP [{0}] does not define in its element [{1}] a value that represents its official identifier. Relax this check and continue with the process.
TC_LOG009 = Error: Critical extensions are not allowed for a TSP belonging to a TSL of a European member.
TC_LOG010 = Error: For the CA / QC type service [{0}] it is required that it has at least the AdditionalServiceInformation extension defined.
TC_LOG011 = Element [{0}] not found in the TSL signature.
TC_LOG012 = The Transform element defined and SignedInfo-Reference-Transforms that points to [{0}] at position [{1}] must define URI [{2}].
TC_LOG013 = The number of Transform elements defined in SignedInfo-Reference-Transforms pointing to [{0}] must be 2.
TC_LOG014 = The Transforms element must be defined in the SignedInfo-Reference that points to [{0}].
TC_LOG015 = Reference element pointing to XML identifier [{0}] not found.
TC_LOG016 = The CanonicalizationMethod element was not found within the SignedInfo.
TC_LOG017 = The CanonicalizationMethod element of SignedInfo must define the URI [{0}].
TC_LOG018 = Error: Digital Identity element is of unrecognized type.
TC_LOG019 = Error: The Digital Identity element of type X509Certificate does not contain the associated certificate.
TC_LOG020 = Error: Digital Identity element of type X509SubjectName contains empty string.
TC_LOG021 = Error: The Digital Identity element of type KeyValue does not contain the KeyValue.
TC_LOG022 = Error: Digital Identity element of type X509SKI does not contain X509SKI.
TC_LOG023 = Error: The Digital Identity element of type Other contains an empty string.
TC_LOG024 = The difference between the issuance date of the TSL and its expiration date must be a maximum of 6 months. The process continues ignoring this error.
TC_LOG025 = Error: Schema extensions are not allowed if the TSL is owned by a European member.
TC_LOG026 = Error: For the historical definition of a service of type PKI, digital identities of type X509Certificate cannot be defined.
TC_LOG027 = Error: For the historical definition of a service of type PKI, at least one digital identity of type X509SKI must be defined.
TC_LOG028 = The KeyInfo element must be defined.
TC_LOG029 = There must only be one element of type X509Data within the KeyInfo.
TC_LOG030 = There must only be one element of type KeyValue within the KeyInfo.
TC_LOG031 = There must only be one element of type SKIData within the KeyInfo.
TC_LOG032 = The KeyInfo element does not define any element of type X509Data, KeyValue or SKIData.
TC_LOG033 = The QualifyingProperties element must be defined in an XAdES signature.
TC_LOG034 = The TSL signing certificate was not retrieved.
TC_LOG035 = The QualifyingProperties element must define the target attribute with the same value as the signature identifier.
TC_LOG036 = At ​​least one Cert element must be defined within SigningCertificate.
TC_LOG037 = The SigningCertificate of Qualifying Properties was not correctly validated against the KeyInfo.
TC_LOG038 = Error: Organization [{0}] of TSL signing certificate does not match any operator name defined in TSL.
TC_LOG039 = Error: TSL signing certificate key usage is not set to digitalSignature and / or nonRepudiation only.
TC_LOG040 = Error: An error occurred while trying to extract the SubjectKeyIdentifier extension from the TSL signing certificate.
TC_LOG041 = Error: An error occurred while parsing the TSL signing certificate.
TC_LOG042 = Error: SubjectKeyIdentifier extension is not defined in the TSL signing certificate.
TC_LOG043 = Error: An error occurred while trying to calculate the SHA-1 hash of the SubjectKeyIdentifier extension of the TSL signing certificate.
TC_LOG044 = Error: The SubjectKeyIdentifier extension of the TSL signing certificate is not defined by any of the first two methods in section 4.2.1.2 of RFC5280.
TC_LOG045 = Error: An error occurred while trying to extract the extension with the basic restrictions from the TSL signing certificate.
TC_LOG046 = Error: Basic restrictions extension of TSL signing certificate indicates CA = true.
TC_LOG047 = Error when parsing the TSL under the ETSI TS 119612 2.1.1 standard.

# en.gob.afirma.tsl.parsing.impl.common.ATSLChecker
ATC_LOG001 = Error: Attribute [{0}] cannot be null.
ATC_LOG002 = Error: Item [{0}] has an incorrect value.
ATC_LOG003 = Error: Element [{0}] cannot be null.
ATC_LOG004 = Error verifying the TSL signature.
ATC_LOG005 = The X509v3 certificate to check if it contains the key usage extension for TSL signing is null.
ATC_LOG006 = There are no key usage extensions for the X509v3 certificate.
ATC_LOG007 = The X509v3 certificate key usage extensions list does not contain the one for TSL signing.
ATC_LOG008 = There was an error parsing the X509v3 certificate to check if it contains the key usage extension for TSL signing.
ATC_LOG009 = An error occurred while trying to check if the TSL signing certificate is in the corresponding truststore.
ATC_LOG010 = An error occurred while trying to extract the signing certificates from the TSL.
ATC_LOG011 = Error while parsing the TSL under the ETSI TS 119612 2.1.1 standard.
ATC_LOG012 = The TSL signing certificate (with issuer [{0}] and serial number [{1}]) could not be found within the corresponding trust store.
ATC_LOG013 = Error: For a non-PKI type service, PKI identities are not allowed.
ATC_LOG014 = Error: For a non-PKI service, the digital identity must be a URI.
ATC_LOG015 = An error occurred checking the values ​​of the TSP-Service [{0}], and within this in the Service-History-Instance [{1}], so this historical service will be marked as NO usable. The error is as follows: {2}
ATC_LOG016 = An error occurred checking the values ​​of TSP-Service [{0}], so this service will be marked as NOT usable (regardless of its history if it had one). The error is as follows: {1}
# en.gob.afirma.tsl.access.TSLProperties
TP_LOG001 = An error occurred while trying to retrieve property [{0}]. The default value [{1}] will be taken for this.
TP_LOG002 = It was not possible to parse the value [{0}] in the property [{1}], so it will be ignored.

# en.gob.afirma.tsl.parsing.impl.common.TSLCertificateExtensionAnalyze
TCEA_LOG001 = The certificate to be analyzed to extract the information of its extensions cannot be null.
TCEA_LOG002 = An error occurred while trying to parse the certificate with the BouncyCastle library.
TCEA_LOG003 = An error occurred trying to extract the QcStatements from the certificate for analysis.
TCEA_LOG004 = An error occurred trying to extract the CertificatePolicies from the certificate for analysis.
TCEA_LOG005 = An error occurred trying to extract the information from the QcStatements - EuType extension for parsing.

# en.gob.afirma.tsl.certValidation.impl.common.ATSLValidator
ATV_LOG001 = Cannot validate a certificate using TSL if it is null.
ATV_LOG002 = To execute the validation of the revocation status of a certificate using TSL, it is necessary to specify a validation date.
ATV_LOG003 = The TSL to use represents a list of lists (reference to other TSLs). For these cases, the certificate to be validated is directly considered as NOT detected.
ATV_LOG004 = The determination status of the TSL to use for validation is in 'Delinquent' mode or equivalent.
ATV_LOG005 = A TSA type service has been found in the TSL that identifies the issuer of the certificate to validate in its digital identities.
ATV_LOG006 = A CA type service has been found in the TSL that identifies the certificate to validate in its digital identities.
ATV_LOG008 = An error occurred checking if the certificate to be validated is signed by one of the certificates defined in the Identities of the TSP Service. The process continues despite the error.
ATV_LOG009 = A CA-type service has been found in the TSL that identifies the issuer of the certificate to validate in its digital identities.
ATV_LOG010 = An error occurred while retrieving the Subject Key Identifier of the detected issuing certificate that identifies the certificate to be validated.
ATV_LOG011 = The certificate to be detected does not meet the conditions established in the AdditionalServiceInformation extensions, but on the recommendation of the Project Management, at the moment this restriction is not taken into account and the process is continued normally considering unknown if the certificate is qualified or not.
ATV_LOG012 = An error occurred evaluating the certificate against the CriteriaList of the extension Qualifications, but as it is not critical, the error is ignored and the process continues.
ATV_LOG013 = The Qualifications extension is not defined for the selected service in the TSL, and the certificate does not meet the requirements established in the specification so that this extension can be omitted. Despite this, the decision has been made to consider the certificate detected by the service (and by the TSL).
ATV_LOG014 = The revocation status of the certificate has been determined by the status of the service that identifies it.
ATV_LOG015 = The certificate has been detected.
ATV_LOG016 = The certificate is considered validated by the service.
ATV_LOG017 = We proceed to check the revocation status of the certificate through the distribution points that it has defined (or AIA extension).
ATV_LOG018 = The revocation status has not been determined with the information contained in it. We proceed to look for a service within the same TSP that provides verification procedures for the status of revocation of the certificate.
ATV_LOG019 = An error occurred evaluating the certificate against the CriteriaLists of the extension Qualifications, and being critical, the certificate is rejected by the discovery process against the TSL.
ATV_LOG020 = The certificate was not detected.
ATV_LOG021 =, making use of the information of the history of this, specifically of the service [{0}] with start date of status [{1}]
ATV_LOG022 = The certificate has been detected in the TSL by the TSP [{0}] and its service [{1}] {2}. The revocation status of the certificate has been checked by the service [{3}] {4}: [{5}]
ATV_LOG023 = Valid.
ATV_LOG024 = Revoked.
ATV_LOG025 = Invalid certification string.
ATV_LOG026 = The Service is revoked.
ATV_LOG027 = The status of the service is not valid (invalid string).
ATV_LOG028 = The certificate has been detected in the TSL by the TSP [{0}] and its service [{1}] {2}. In addition, its revocation status has been determined: [{3}]
ATV_LOG029 = No service could be identified in any TSP of the TSL that identifies the certificate to validate.
ATV_LOG030 = The certificate has been detected in the TSL by the TSP [{0}] and its service [{1}] {2}, but the revocation status of the certificate could not be checked.
ATV_LOG031 = The certificate has been detected in the TSL by the TSP [{0}] and its service [{1}].
ATV_LOG032 = The revocation status is unknown.

# en.gob.afirma.tsl.parsing.impl.common.extensions.CriteriaList
CL_LOG001 = Error: Extension [{0}] must define a value for attribute [{1}].
CL_LOG002 = Error: Extension [{0}] cannot have the value [{1}].
CL_LOG003 = An error occurred when evaluating if the certificate meets the additional criteria established by the TSP-Service to detect it. The certificate is considered not to meet the criteria.
CL_LOG004 = An error occurred while trying to parse the certificate to validate to obtain its 'CertificatePolicies' extension. The certificate is considered not to meet the criteria.

# en.gob.afirma.tsl.certValidation.impl.common.DigitalIdentitiesProcessor
DIP_LOG001 = An error occurred checking if the certificate to validate is signed by one of the certificates defined in the Identities of the TSP Service. The process continues despite the error.
DIP_LOG002 = An error occurred while retrieving the Subject Name of the detected issuing certificate that identifies the certificate to validate.
DIP_LOG003 = An error occurred while retrieving the Subject Key Identifier of the detected issuing certificate that identifies the certificate to validate.
DIP_LOG004 = An error occurred trying to verify the certificate to be validated using a public key obtained from the TSP Service. The process continues despite the error.
DIP_LOG005 = An error occurred trying to compare the issuer of the certificate to validate with the subject obtained in the identity of the TSP Service. The process continues despite the error.
DIP_LOG006 = An error occurred obtaining the AuthorityKeyIdentifier extension of the certificate to validate. The process continues despite the error.
DIP_LOG007 = An error occurred checking if the certificate to be validated matches any of the certificates defined in the Identities of the TSP Service. The process continues despite the error.

# en.gob.afirma.tsl.utils.UtilsASN1
UA_LOG001 = Error during certificate creation.
UA_LOG002 = Error getting certificate information.

# en.gob.afirma.tsl.certValidation.impl.common.TSLValidatorThroughOCSP
TV_LOG001 = It is about obtaining the OCSP response attacking the server located at the URI: [{0}].
TV_LOG002 = Unable to check certificate revocation status through OCSP.
TV_LOG003 = The OCSP response is not considered valid as the signer does not meet the necessary conditions or is unknown.
TV_LOG004 = The OCSP response obtained from URI: [{0}] has been obtained (and validated) successfully.
TV_LOG005 = There was an error trying to construct the CertID object to validate the certificate using OCSP.
TV_LOG006 = An error occurred while trying to generate and send the OCSP request to [{0}].
TV_LOG007 = The OCSP response is not of the BasicOCSPResponse type, which is the only one supported, so we will continue looking for another alternative to validate the certificate.
TV_LOG008 = The status of the OCSP response is not valid [{0}], so it will continue to look for another alternative to validate the certificate.
TV_LOG009 = It was not possible to check if the OCSP response is signed by the issuer of the certificate to be validated since the public key of this is not known.
TV_LOG010 = The OCSP response is not signed by a valid certificate, so it will continue to look for another alternative to validate the certificate.
TV_LOG011 = An error occurred parsing the OCSP response to check the revocation status of the certificate to validate.
TV_LOG012 = The OCSP response indicates that the certificate to validate is unknown.
TV_LOG013 = There was an error trying to check if the certificate to validate is revoked on the CRL.
TV_LOG014 = An error occurred while retrieving the access information to the services of the certificate authority to validate.
TV_LOG015 = The OCSP response is not considered valid as the signer does not meet the necessary conditions or is unknown.
TV_LOG016 = Unable to check the revocation status of the certificate using OCSP.
TV_LOG017 = The issuer of the certificate (of intermediate CA) has been found within the TSP that detects it.
TV_LOG018 = The issuer of the certificate (of intermediate CA) was NOT found within the TSP itself that detects it.
TV_LOG019 = An error occurred while trying to parse the certificate to validate to obtain information and extensions. The certificate is considered not to meet the conditions to be detected.
TV_LOG020 = An error occurred getting / parsing the OCSP response from [{0}].
TV_LOG021 = The reply of the OCSP reply is not trusted. Said reply is [{0}] emitted by [{1}].
TV_LOG022 = An error occurred when trying to parse the certificate to be validated with the IAIK library, so the validation process is aborted.
TV_LOG023 = An error occurred verifying the OCSP response, so it will continue to look for another alternative to validate the certificate.
TV_LOG024 = There was an error verifying if the signer certificate of the OCSP response has the extension to sign OCSP responses, so the process will try another ways to validate the revocation status of the certificate.
TV_LOG025 = There was an error getting the CRL distribution points from the certificate to validate.
#UtilsProviders
UP_LOG000 = No cryptographic provider declared in the JDK has been found that has the random number generation algorithm [{0}].
UP_LOG001 = The random number generation algorithm [{0}] for provider [{1}] could not be found. We proceed to try to obtain this same algorithm for any other provider declared in the JDK.
UP_LOG002 = The cryptographic provider [{0}] could not be found. It will try to obtain the random number generation algorithm [{1}] for any other provider declared in the JDK.
UP_LOG003 = A random number generator has been obtained for algorithm [{0}] and provider [{1}].
UP_LOG004 = A random number generator will be used for algorithm [{0}] and provider [{1}].

#UtilsCertificateTsl
UC_LOG000 = Error during certificate creation.
UC_LOG001 = Error getting the public key of the certificate. The public key is invalid.
UC_LOG002 = Error during certificate creation.
UC_LOG003 = Error in hashing the certificate.
UC_LOG004 = Error getting the provider for the given certificate.
UC_LOG005 = Error trying to get certificate key purposes.

#UtilsHTTP
UH_LOG_000 = The connection has been established.
UH_LOG_001 = The maximum size allowed for the length of the data to download [{0} bytes] has been exceeded.
UH_LOG_002 = The data length [{0} bytes] exceeds the maximum size allowed [{1} bytes].
UH_LOG_003 = The number of bytes read does not match the number of bytes occupied by the resource to be accessed.
UH_LOG_004 = Information successfully extracted from http / s response.
UH_LOG_005 = An error occurred in the HTTP / S connection. StatusCode: [{0}]; ReasonPhrase: [{1}];
UH_LOG_006 = An error occurred in the HTTP / S connection. No response has even been obtained.
UH_LOG_007 = Unable to get data from [{0}].
UH_LOG_008 = Input data for HTTP / S connection via POST cannot be null.
UH_LOG_009 = Sending HTTP / S request to path [{0}].
UH_LOG_010 = Received response from server.
UH_LOG_011 = Reading information from source ...
UH_LOG_012 = The Content-Type of the response is not [{0}], but Content-type was received: [{1}].
UH_LOG_013 = An error occurred while closing the resources used for the connection.
UH_LOG_014 = Could not get response data for [{0}].

#UtilsProxy
UPR_LOG_000 = There was an error loading the host and port to use for the proxy (Host = [{0}], Port = [{1}]), so proxy will not be used for connections.
UPR_LOG_001 = An error occurred while loading the host and port to use for the secure proxy (Host = [{0}], Port = [{1}]), so the secure proxy will not be used for connections .
UPR_LOG_002 = There was an error loading the username and password for authentication in the proxy (User = [{0}], Password = [{1}]), so no authentication will be used for the proxy.
UPR_LOG_003 = There was an error loading the username and password for authentication in the secure proxy (User = [{0}], Password = [{1}]), so authentication will not be used. u00F3n for the secure proxy.
UPR_LOG_004 = There was an error loading domain and workstation for NTLM authentication on proxy (Domain = [{0}], WorkStation = [{1}]), so authentication will be used Basic for the proxy (not NTLM).
UPR_LOG_005 = There was an error loading domain and workstation for NTLM authentication on secure proxy (Domain = [{0}], WorkStation = [{1}]), so authentication will be used Basic for secure proxy (not NTLM).
UPR_LOG_006 = The proxy configuration has been loaded successfully.
UPR_LOG_007 = It could not be determined if it is a local route so it is considered not. Tried to check path: [{0}].
UPR_LOG_008 = It could not be verified if the URL [{0}] is one of the assigned ones for which the proxy will NOT be used, so by default the use of the proxy is allowed for said URL.


#IntegraSSLSocketFactory
UTILS_SSL_SOCKET_000 = The encryption algorithms that must be restricted in SSL communication have not been obtained.
UTILS_SSL_SOCKET_001 = The protocols to be restricted in SSL communication have not been obtained.

#UtilsCRL
UTILS_CRL_000 = It was not possible to instantiate the X.509 factor to build the CRL.
UTILS_CRL_001 = An error occurred constructing X.509 CRL from input data.
UTILS_CRL_002 = The CRL cannot be used to check the status of the certificate, as it is not indirect and its issuer [{0}] does not match that of the certificate [{1}].
UTILS_CRL_003 = The CRL cannot be used to check the status of the certificate, since it is not indirect and its issuer [{0}] does not match the certificate [{1}] or any of the trusted ones (provided for this CRL).
UTILS_CRL_004 = An error occurred trying to parse the content of the CRL.

#UtilsLDAP
UTILS_LDAP_000 = An error occurred while trying to make an LDAP connection [{0}] (if the port is not specified in the URL, it is used by default [{1}]).
UTILS_LDAP_001 = An error occurred while trying to make an LDAP connection [{0}] (if the port is not specified in the URL, it is used by default [{1}]) using user [{2}] and password [XXXXXXX].
UTILS_LDAP_002 = The path was found within the LDAP, but it does not contain the [certificateRevocationList] attribute, so no CRL was retrieved.
UTILS_LDAP_003 = The path was found within the LDAP, and it contains the [certificateRevocationList] attribute.
UTILS_LDAP_004 = There is no CRL in the indicated path within LDAP.
UTILS_LDAP_005 = An error occurred trying to explore the path within LDAP.

# en.gob.afirma.tsl.certValidation.impl.common.TSLValidatorThroughCRL
TVTCRL_LOG000 = The CRL cannot be accessed or parsed.
TVTCRL_LOG001 = The URI schema [{0}] is not valid for downloading a CRL. This should be of type HTTP, LDAP or FTP.
TVTCRL_LOG002 = The obtained CRL has already expired for date [{0}]. Its validity period ended on [{1}].
TVTCRL_LOG003 = There was an error trying to check if the certificate to validate is revoked on the CRL.
TVTCRL_LOG004 = No CRL type distribution points found in the certificate to validate.
TVTCRL_LOG005 = CRL issuer [{1}] is not trusted.
TVTCRL_LOG006 = An error occurred while trying to download a CRL via LDAP located at path [{0}], so it will try to find an alternative if possible.
TVTCRL_LOG007 = An error occurred while trying to download a CRL via FTP located at path [{0}], so it will try to find an alternative if possible.
TVTCRL_LOG008 = An error occurred while trying to download a CRL via HTTP located at path [{0}], so it will try to find an alternative if possible.

# Texts from AES Cipher.
AESCIPHER001 = Error initializing the AES encoder.
AESCIPHER002 = Error decoding the message.
AESCIPHER003 = Error encoding the message.

#UtilsConnection
UTILS_CONNECTION_000 = Property [{0}] does not contain a suitable value. Its default value will be taken: [{1}].
UTILS_CONNECTION_001 = Property [{0}] does not have a value assigned. Its default value will be taken: [{1}].

# en.gob.afirma.tsl.TslValidation
TSLVAL_LOG001 = The certificate detection has been requested through TSL, and optionally obtain its data and verification of revocation status, with the following parameters: [Application -> {0}] | [Delegated application -> {1}] | [TSL location -> {2}] | [Certificate -> {3}] | [Detection date -> {4}] | [Get info -> {5}] | [Check revocation status -> {6}] | [Return evidence of revocation -> {7} | [CRLs -> {8}] | [OCSPs -> {9}].
TSLVAL_LOG002 = TSL information has been requested with the following parameters: [Application -> {0}] | [Delegated application -> {1}] | [Country / Region -> {2}] | [TSL location -> {3}] | [Get XML from TSL -> {4}].
TSLVAL_LOG003 = The method has not received the following mandatory parameters for its execution:
TSLVAL_LOG004 = The revocation information cannot be returned if it has not been indicated that the revocation status of the certificate should be checked or evidence of revocation to be analyzed has been sent.
TSLVAL_LOG005 = Only the country / region of the TSL or its location can be specified, but not both simultaneously.
TSLVAL_LOG006 = The received validation date [{0}] is not valid as it is later than the current one [{1}] (a time window of [{2}] milliseconds is taken into account).
TSLVAL_LOG007 = The requested TSL information was not found.
TSLVAL_LOG008 = The information of the requested TSL has been obtained correctly.
TSLVAL_LOG009 = A controlled error occurred during the execution of service [{0}]. The server log should be consulted for more information.
TSLVAL_LOG010 = A controlled error occurred during the execution of the service [{0}] so the execution of the service did not complete and it is returned as a response that its execution was not possible.
TSLVAL_LOG011 = An UNhandled error occurred during the execution of service [{0}].
TSLVAL_LOG012 = An error occurred parsing the inbound certificate. This must be indicated in Base64 (string).
TSLVAL_LOG013 = No TSL found for country / region [{0}].
TSLVAL_LOG014 = No TSL defined by location [{0}] found.
TSLVAL_LOG015 = Analysis of the certificate on the TSL has been completed.
TSLVAL_LOG016 = Found a TSL for location [{0}] and date [{1}]. The analysis of the certificate on the TSL has been completed.
TSLVAL_LOG017 = The certificate has not been detected in the TSL.
TSLVAL_LOG018 = The certificate has been discovered in the TSL.
TSLVAL_LOG019 = The certificate has been discovered in the TSL. The mapping information associated with this has NOT been obtained.
TSLVAL_LOG020 = The certificate has been discovered in the TSL. The mapping information associated with this has been obtained.
TSLVAL_LOG021 = Could not determine the revocation status of the certificate.
TSLVAL_LOG022 = The revocation status of the certificate has been checked: OK.
TSLVAL_LOG023 = The revocation status of the certificate has been checked: Revoked.
TSLVAL_LOG024 = The revocation status of the certificate has been checked: Expired: Invalid certification chain (its validity period has expired).
TSLVAL_LOG025 = The revocation status of the certificate has been checked: Revoked: The service that recognizes it is revoked.
TSLVAL_LOG026 = The revocation status of the certificate has been checked: Unknown: The service that recognizes the certificate is no longer monitored.
TSLVAL_LOG027 = The certificate has been discovered in the TSL. The revocation information associated with this has NOT been obtained.
TSLVAL_LOG028 = The certificate has been discovered in the TSL. The revocation information associated with this has been obtained.
TSLVAL_LOG029 = The certificate has been discovered in the TSL. The mapping information associated with this has NOT been obtained. The revocation information associated with this has NOT been obtained.
TSLVAL_LOG030 = The certificate has been discovered in the TSL. The mapping information associated with this has NOT been obtained. The revocation information associated with this has been obtained.
TSLVAL_LOG031 = The certificate has been discovered in the TSL. The mapping information associated with this has been obtained. The revocation information associated with this has NOT been obtained.
TSLVAL_LOG032 = The certificate has been found in the TSL. The mapping information associated with this has been obtained. The revocation information associated with this has been obtained.
TSLVAL_LOG033 = The received validation date [{0}] is not valid as it does not comply with the format [{1}].
TSLVAL_LOG034 = At \u200B\u200Bleast one of the CRLs received is not parseable.
TSLVAL_LOG035 = At \u200B\u200Bleast one of the basic OCSP responses received is not parseable.
TSLVAL_LOG036 = An error occurred trying to retrieve application [{0}] from the configuration cache.
TSLVAL_LOG037 = The application [{0}] is not recognized and therefore is not authorized.
TSLVAL_LOG038 = An error occurred calculating the byte array that represents the response, so the transaction closure message will not be included in the audit.
TSLVAL_LOG039 = An error occurred calculating the byte array representing the set of service input parameters.
TSLVAL_LOG040 = No result of the certificate discovery process was obtained in the indicated TSL.
TSLVAL_LOG041 = The mapping information associated with the certificate has been obtained.
TSLVAL_LOG042 = Start of obtaining mappings associated with the certificate.
TSLVAL_LOG043 = End of obtaining mappings associated with the certificate. Time taken: [{0} milliseconds].

# en.gob.afirma.tsl.parsing.impl.common.extensions
EXT_LOG001 = Error: The ExpiredCertsRevocationInfo extension can only be found (be of type) [{0}], and in this case it is [{1}].
EXT_LOG002 = Error: Extension [{0}] cannot be critical.
EXT_LOG003 = Error: The extension [{0}] cannot be associated with a service of type [{1}].
EXT_LOG004 = Error: Extension [{0}] does not contain a suitable number of items.
EXT_LOG005 = Error: Extension [{0}] cannot have the value [{1}].
EXT_LOG006 = Error: Extension [{0}] must define a suitable value for element [{1}].
EXT_LOG007 = Error: The URI defined in the Qualification-Qualifier extension does not have a valid value: [{0}].
EXT_LOG008 = Error: The Qualifications extension can only be found (be of type) [{0}], and in this case it is [{1}].
EXT_LOG009 = Error: Extension [{0}] of type [{2}] is unknown and critical.
EXT_LOG010 = An error occurred while trying to parse the certificate to validate to obtain its extension 'CertificatePolicies'. The certificate is considered not to meet the criteria.

# en.gob.afirma.tsl.parsing.impl.common.CertSubjectDNAttributeOtherCriteria
CSDAOC_LOG001 = Error parsing the certificate to validate to obtain its Subject DN and analyze it according to what the TSL indicates.
CSDAOC_LOG002 = The alternative criterion CertSubjectDNAttribute must define at least one OID.

# en.gob.afirma.tsl.parsing.impl.common.ExtendedKeyUsageOtherCriteria
EKVOC_LOG001 = Error obtaining the key usage extension of the certificate to validate to verify that it contains those indicated by the TSL.
EKVOC_LOG002 = The alternative criterion ExtendedKeyUsage must define at least one OID.

# en.gob.afirma.tsl.parsing.impl.tsl119612.v020101.AdditionalServiceInformation
ASI_LOG001 = Error: Extension AdditionalServiceInformation can only be found (be of type) [{0}], and in this case it is [{1}].
ASI_LOG002 = Error: Extension [{0}] must define a suitable value for element [{1}].
ASI_LOG003 = Error: AdditionalServiceInformation extension is not assigned a correct URI: [{0}].
ASI_LOG004 = Error: For the AdditionalServiceInformationExtension extension, if the URI [{0}] is assigned, the associated service type must be [{1}].
ASI_LOG005 = The extension AdditionalServiceInformation with URI [{1}] has been detected in the TSP Service [{0}], which is not known. As it is not set as a critical extension, it is ignored and the process continues.
TSLP_LOG001 = Error parsing the URI that represents a location of a TSL [{0}].


#UtilsCrypto
UTILS_CRYPTO_000 = Hash algorithm [{0}] is not supported.
UTILS_CRYPTO_001 = The hash algorithm cannot be null, it must be specified correctly.
UTILS_CRYPTO_002 = Data to hash cannot be null or empty.
